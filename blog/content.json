{"pages":[{"title":"About","date":"2023-10-29T10:14:54.691Z","path":"about/index.html","text":""},{"title":"Categories","date":"2023-10-29T04:05:28.040Z","path":"categories/index.html","text":""},{"title":"","date":"2023-10-29T04:05:28.039Z","path":"about/tips/tip.css","text":"#cute { display: inline; text-align:center; width: 50%; } #cute:hover { transform: translateY(0); } #cute-tips{ animation: shake 50s ease-in-out 5s infinite; background-color: rgba(0, 0, 0, 0.753); border: 1px solid rgba(224, 186, 140, .62); border-radius: 12px; box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2); font-size: 14px; line-height: 24px; width: 25%; min-height: 70px; opacity: 0; overflow: hidden; position: relative; margin: 0 auto; text-overflow: ellipsis; transition: opacity 1s; width: 250px; word-break: break-all; } #cute-tips.cute-tips-active { opacity: 1; transition: opacity .2s; } @keyframes shake { 2% { transform: translate(.5px, -1.5px) rotate(-.5deg); } 4% { transform: translate(.5px, 1.5px) rotate(1.5deg); } 6% { transform: translate(1.5px, 1.5px) rotate(1.5deg); } 8% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 10% { transform: translate(.5px, 2.5px) rotate(.5deg); } 12% { transform: translate(1.5px, 1.5px) rotate(.5deg); } 14% { transform: translate(.5px, .5px) rotate(.5deg); } 16% { transform: translate(-1.5px, -.5px) rotate(1.5deg); } 18% { transform: translate(.5px, .5px) rotate(1.5deg); } 20% { transform: translate(2.5px, 2.5px) rotate(1.5deg); } 22% { transform: translate(.5px, -1.5px) rotate(1.5deg); } 24% { transform: translate(-1.5px, 1.5px) rotate(-.5deg); } 26% { transform: translate(1.5px, .5px) rotate(1.5deg); } 28% { transform: translate(-.5px, -.5px) rotate(-.5deg); } 30% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 32% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 34% { transform: translate(2.5px, 2.5px) rotate(-.5deg); } 36% { transform: translate(.5px, -1.5px) rotate(.5deg); } 38% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 40% { transform: translate(-.5px, 2.5px) rotate(.5deg); } 42% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 44% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 46% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 48% { transform: translate(2.5px, -.5px) rotate(.5deg); } 50% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 52% { transform: translate(-.5px, 1.5px) rotate(.5deg); } 54% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 56% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 58% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 60% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 62% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 64% { transform: translate(-1.5px, 1.5px) rotate(1.5deg); } 66% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 68% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 70% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 72% { transform: translate(-.5px, -1.5px) rotate(1.5deg); } 74% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 76% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 78% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 80% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 82% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 84% { transform: translate(-.5px, .5px) rotate(1.5deg); } 86% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 88% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 90% { transform: translate(-1.5px, -.5px) rotate(-.5deg); } 92% { transform: translate(-1.5px, -1.5px) rotate(1.5deg); } 94% { transform: translate(.5px, .5px) rotate(-.5deg); } 96% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 98% { transform: translate(-1.5px, -1.5px) rotate(-.5deg); } 0%, 100% { transform: translate(0, 0) rotate(0); } }"},{"title":"Tags","date":"2023-10-29T04:05:28.041Z","path":"tags/index.html","text":""},{"title":"","date":"2023-10-29T04:05:28.039Z","path":"about/tips/tips.json","text":"{\"mouseover\":[{\"selector\":\"#blog\",\"text\":[\"关于本博客？主要用于知识归纳和整理哦\"]},{\"selector\":\"#info\",\"text\":[\"关于主人的事？一直在努力成为大佬呢\"]},{\"selector\":\"#mail\",\"text\":[\"主人的邮箱地址哦：x17152141010@163.com\"]},{\"selector\":\".menu-item-home a\",\"text\":[\"点击前往首页，想回到上一页可以使用浏览器的后退功能哦。\",\"点它就可以回到首页啦！\",\"回首页看看吧。\"]},{\"selector\":\".menu-item-about a\",\"text\":[\"你想知道我家主人是谁吗？\",\"这里有一些关于我家主人的秘密哦，要不要看看呢？\",\"发现主人出没地点！\"]},{\"selector\":\".menu-item-tags a\",\"text\":[\"点击就可以看文章的标签啦！\",\"点击来查看所有标签哦。\"]},{\"selector\":\".menu-item-categories a\",\"text\":[\"文章都分类好啦～\",\"点击来查看文章分类哦。\"]},{\"selector\":\".menu-item-archives a\",\"text\":[\"翻页比较麻烦吗，那就来看看文章归档吧。\",\"文章目录都整理在这里啦！\"]},{\"selector\":\".menu-item-friends a\",\"text\":[\"这是我的朋友们哦ヾ(◍°∇°◍)ﾉﾞ\",\"要去大佬们的家看看吗？\",\"要去拜访一下我的朋友们吗？\"]},{\"selector\":\".menu-item-search a\",\"text\":[\"找不到想看的内容？搜索看看吧！\",\"在找什么东西呢，需要帮忙吗？\"]},{\"selector\":\".menu-item a\",\"text\":[\"快看看这里都有什么呢？\"]},{\"selector\":\".site-author\",\"text\":[\"我家主人好看吗？\",\"这是我家主人(*´∇｀*)\"]},{\"selector\":\".site-state\",\"text\":[\"这是文章的统计信息～\",\"要不要点进去看看？\"]},{\"selector\":\".feed-link a\",\"text\":[\"这里可以使用 RSS 订阅呢！\",\"利用 feed 订阅器，就能快速知道博客有没有更新了呢。\"]},{\"selector\":\".cc-opacity, .post-copyright-author\",\"text\":[\"要记得规范转载哦。\",\"所有文章均采用 CC BY-NC-SA 4.0 许可协议～\",\"转载前要先注意下文章的版权协议呢。\"]},{\"selector\":\".links-of-author\",\"text\":[\"这里是主人的常驻地址哦。\",\"这里有主人的联系方式！\"]},{\"selector\":\".followme\",\"text\":[\"手机扫一下就能继续看，很方便呢～\",\"扫一扫，打开新世界的大门！\"]},{\"selector\":\".fancybox img, img.medium-zoom-image\",\"text\":[\"点击图片可以放大呢！\"]},{\"selector\":\".copy-btn\",\"text\":[\"代码可以直接点击复制哟。\"]},{\"selector\":\".highlight .table-container, .gist\",\"text\":[\"GitHub！我是新手！\",\"PHP 是最好的语言！\"]},{\"selector\":\"a[href^='mailto']\",\"text\":[\"邮件我会及时回复的！\",\"点击就可以发送邮件啦～\"]},{\"selector\":\"a[href^='/tags/']\",\"text\":[\"要去看看 {text} 标签么？\",\"点它可以查看此标签下的所有文章哟！\"]},{\"selector\":\"a[href^='/categories/']\",\"text\":[\"要去看看 {text} 分类么？\",\"点它可以查看此分类下的所有文章哟！\"]},{\"selector\":\".post-title-link\",\"text\":[\"要看看 {text} 这篇文章吗？\"]},{\"selector\":\"a[rel='contents']\",\"text\":[\"点击来阅读全文哦。\"]},{\"selector\":\"a[itemprop='discussionUrl']\",\"text\":[\"要去看看评论吗？\"]},{\"selector\":\".beian a\",\"text\":[\"我也是有户口的人哦。\",\"我的主人可是遵纪守法的好主人。\"]},{\"selector\":\".container a[href^='http'], .nav-link .nav-text\",\"text\":[\"要去看看 {text} 么？\",\"去 {text} 逛逛吧。\",\"到 {text} 看看吧。\"]},{\"selector\":\".back-to-top\",\"text\":[\"点它就可以回到顶部啦！\",\"又回到最初的起点～\",\"要回到开始的地方么？\"]},{\"selector\":\".reward-container\",\"text\":[\"我是不是棒棒哒～快给我点赞吧！\",\"要打赏我嘛？好期待啊～\",\"主人最近在吃土呢，很辛苦的样子，给他一些钱钱吧～\"]},{\"selector\":\"#wechat\",\"text\":[\"这是我的微信二维码～\"]},{\"selector\":\"#alipay\",\"text\":[\"这是我的支付宝哦！\"]},{\"selector\":\"#bitcoin\",\"text\":[\"这是我的比特币账号！\"]},{\"selector\":\"#needsharebutton-postbottom .btn\",\"text\":[\"好东西要让更多人知道才行哦。\",\"觉得文章有帮助的话，可以分享给更多需要的朋友呢。\"]},{\"selector\":\".need-share-button_weibo\",\"text\":[\"微博？来分享一波喵！\"]},{\"selector\":\".need-share-button_wechat\",\"text\":[\"分享到微信吧！\"]},{\"selector\":\".need-share-button_douban\",\"text\":[\"分享到豆瓣好像也不错！\"]},{\"selector\":\".need-share-button_qqzone\",\"text\":[\"QQ 空间，一键转发，耶～\"]},{\"selector\":\".need-share-button_twitter\",\"text\":[\"Twitter？好像是不存在的东西？\"]},{\"selector\":\".need-share-button_facebook\",\"text\":[\"emmm…FB 好像也是不存在的东西？\"]},{\"selector\":\".post-nav-item a[rel='next']\",\"text\":[\"来看看下一篇文章吧。\",\"点它可以看下一篇文章哦！\",\"要翻到下一篇文章吗？\"]},{\"selector\":\".post-nav-item a[rel='prev']\",\"text\":[\"来看看上一篇文章吧。\",\"点它可以看上一篇文章哦！\",\"要翻到上一篇文章吗？\"]},{\"selector\":\".extend.next\",\"text\":[\"去下一页看看吧。\",\"点它可以前进哦！\",\"要翻到下一页吗？\"]},{\"selector\":\".extend.prev\",\"text\":[\"去上一页看看吧。\",\"点它可以后退哦！\",\"要翻到上一页吗？\"]},{\"selector\":\"input.vnick\",\"text\":[\"该怎么称呼你呢？\",\"留下你的尊姓大名！\"]},{\"selector\":\".vmail\",\"text\":[\"留下你的邮箱，不然就是无头像人士了！\",\"记得设置好 Gravatar 头像哦！\",\"为了方便通知你最新消息，一定要留下邮箱！\"]},{\"selector\":\".vlink\",\"text\":[\"快快告诉我你的家在哪里，好让我去参观参观！\"]},{\"selector\":\".veditor\",\"text\":[\"想要去评论些什么吗？\",\"要说点什么吗？\",\"觉得博客不错？快来留言和主人交流吧！\"]},{\"selector\":\".vcontrol a\",\"text\":[\"你会不会熟练使用 Markdown 呀？\",\"使用 Markdown 让评论更美观吧～\"]},{\"selector\":\".vemoji-btn\",\"text\":[\"要插入一个萌萌哒的表情吗？\",\"要来一发表情吗？\"]},{\"selector\":\".vpreview-btn\",\"text\":[\"要预览一下你的发言吗？\",\"快看看你的评论有多少负熵！\"]},{\"selector\":\".vsubmit\",\"text\":[\"评论没有审核，要对自己的发言负责哦～\",\"要提交了吗，请耐心等待回复哦～\"]},{\"selector\":\".vcontent\",\"text\":[\"哇，快看看这个精彩评论！\",\"如果有疑问，请尽快留言哦～\"]}],\"click\":[{\"selector\":\"#live2d\",\"text\":[\"是…是不小心碰到了吧…\",\"萝莉控是什么呀？\",\"你看到我的小熊了吗？\",\"再摸的话我可要报警了！⌇●﹏●⌇\",\"110 吗，这里有个变态一直在摸我(ó﹏ò｡)\",\"不要摸我了，我会告诉老婆来打你的！\",\"干嘛动我呀！小心我咬你！\",\"别摸我，有什么好摸的！\"]},{\"selector\":\".veditor\",\"text\":[\"要吐槽些什么呢？\",\"一定要认真填写喵～\",\"有什么想说的吗？\"]},{\"selector\":\".vsubmit\",\"text\":[\"输入验证码就可以提交评论啦～\"]}],\"seasons\":[{\"date\":\"01/01\",\"text\":\"元旦了呢，新的一年又开始了，今年是{year}年～\"},{\"date\":\"02/14\",\"text\":\"又是一年情人节，{year}年找到对象了嘛～\"},{\"date\":\"03/08\",\"text\":\"今天是国际妇女节！\"},{\"date\":\"03/12\",\"text\":\"今天是植树节，要保护环境呀！\"},{\"date\":\"04/01\",\"text\":\"悄悄告诉你一个秘密～今天是愚人节，不要被骗了哦～\"},{\"date\":\"05/01\",\"text\":\"今天是五一劳动节，计划好假期去哪里了吗～\"},{\"date\":\"06/01\",\"text\":\"儿童节了呢，快活的时光总是短暂，要是永远长不大该多好啊…\"},{\"date\":\"09/03\",\"text\":\"中国人民抗日战争胜利纪念日，铭记历史、缅怀先烈、珍爱和平、开创未来。\"},{\"date\":\"09/10\",\"text\":\"教师节，在学校要给老师问声好呀～\"},{\"date\":\"10/01\",\"text\":\"国庆节到了，为祖国母亲庆生！\"},{\"date\":\"11/05-11/12\",\"text\":\"今年的双十一是和谁一起过的呢～\"},{\"date\":\"12/20-12/31\",\"text\":\"这几天是圣诞节，主人肯定又去剁手买买买了～\"}]}"},{"title":"","date":"2023-10-29T04:05:28.038Z","path":"about/tips/main.js","text":"var pageData; $(document).ready(() => { var v = new Viewer('assets'); }); class Viewer { constructor (basePath) { fetch(\"tips/tips.json\") .then(response => response.json()) .then(result => { window.addEventListener(\"mouseover\", event => { for (let { selector, text } of result.mouseover) { if (!event.target.matches(selector)) continue; text = this.randomSelection(text); text = text.replace(\"{text}\", event.target.innerText); this.showMessage(text, 4000, 10); return; } }); window.addEventListener(\"click\", event => { for (let { selector, text } of result.click) { if (!event.target.matches(selector)) continue; text = this.randomSelection(text); text = text.replace(\"{text}\", event.target.innerText); this.showMessage(text, 4000, 8); return; } }); result.seasons.forEach(({ date, text }) => { const now = new Date(), after = date.split(\"-\")[0], before = date.split(\"-\")[1] || after; if ((after.split(\"/\")[0] { this.showMessage(\"你都复制了些什么呀，转载要记得加上出处哦！\", 6000, 9); }); window.addEventListener(\"visibilitychange\", () => { if (!document.hidden) this.showMessage(\"哇，你终于回来了～\", 6000, 9); }); this.welcomeMessage(); } welcomeMessage(){ let text; if (location.pathname === \"/blog/about/\") { // 如果是主页 const now = new Date().getHours(); if (now > 5 && now 7 && now 11 && now 13 && now 17 && now 19 && now 21 && now priority)) return; if (this.messageTimer) { clearTimeout(this.messageTimer); this.messageTimer = null; } sessionStorage.setItem(\"cute-text\", priority); const tips = document.getElementById(\"cute-tips\"); tips.innerHTML = text; tips.classList.add(\"cute-tips-active\"); this.messageTimer = setTimeout(() => { sessionStorage.removeItem(\"cute-text\"); tips.classList.remove(\"cutes-tips-active\"); }, timeout); } }"}],"posts":[{"title":"Computer_Data","date":"2022-08-17T12:03:22.000Z","path":"Computer-DataStructure/","text":"数据结构 树 图 查找 内部排序","tags":[],"categories":[]},{"title":"Computer_Software","date":"2022-08-13T02:20:36.000Z","path":"Computer-Software/","text":"概述操作系统概述在计算机系统上配置操作系统，其主要目标是：方便性、有效性、可扩充性和开放性 处理机管理 批处理系统：平均周转时间短、系统吞吐量高、处理机利用率高，周转时间 = 完成时间 - 到达时间、带权周转时间 = 周转时间 / 服务时间 分时系统：响应时间快、均衡性 实时系统：截止时间的保证、可预测性，处理时间和 / 周期时间和 &lt;= N，松弛度 = 截止时间 - 运行时间 调度 死锁 存储器管理 IO系统 设备控制器驱动程序将抽象IO命令转换出的一系列具体的命令、参数等数据装入设备控制器的相应寄存器，由控制器来执行这些命令，具体实施对IO设备的控制。 利用特定的IO指令：每个控制寄存器分配一个IO端口，设置特定IO指令，访问内存和访问设备需要两种不同的指令 内存映像IO：在编址上不再区分内存单元地址和设备控制器中的寄存器地址 中断：IO设备中断信号的响应，外中断 陷入：CPU内部事件(上溢下溢等)引起的，内中断 文件管理","tags":[],"categories":[]},{"title":"Computer_Hardware","date":"2022-06-29T08:36:46.000Z","path":"Computer-Hardware/","text":"计算机组成 拓展计算机组成|organization和计算机体系结构|architecture：后者是前者的抽象|概念化，比如存储器属于体系结构、ROM属于组成 信息信息表示 总线总线是一种能由多个部件分时共享的公共信息传送线路 总线标准 总线结构 总线控制 存储器 RAM主存分为按字寻址和按字节寻址，地址总线决定寻址范围、数据总线决定存储字长 容量 = 存储单元个数×存储字长 （位） 存取时间：读出时间（接收到有效地址开始到产生有效输出所需的时间、写入时间（接收到有效地址开始到数据写入单元的时间 存取周期：存储器连续两次独立的存储器操作所需的最小间隔时间，通常大于存取时间（有一段维持有效数据的时间保证数据可靠 存储器带宽：缩短存取周期、增加存储字长、增加存储体 译码驱动方式：线选法（直接选中一个单元，重合法（分两个方向选中某一位 ROM按ROM的原始定义，一旦注人原始信息即不能改变，对半导体ROM而言，基本器件为两种：MOS型和TTL型。 Cache在多体并行存储系统中，由于/O设备向主存请求的级别高于CPU访存，增加Cache避免空等；主存速度的提高始终跟不上CPU的发展 辅存与主存相比，辅存具有容量大、速度慢、价格低、可脱机保存信息等特点，有硬磁盘、软磁盘、磁带、光盘等 道密度（磁盘）：半径方向单位长度磁道数，等于道距的倒数 位密度（磁盘）：单位长度磁道能记录二进制信息的位数，等于每道总位数除以最内同心圆长度（规定，各磁道信息量相同位密度不同） 存储容量：外存所能存储的二进制信息总数量，非格式化容量是磁表面可以利用的磁化单元总数，格式化容量是指按某种特定的记录格式所能存储信息的总量即用户能使用的容量 平均寻址时间：平均找道时间（max + min）/ 2 和平均等待时间（max + min）/ 2之和 数据传输率：单位时间内磁表面存储器向主机传送数据的位数或字节数，记录密度乘以记录介质的运动速度 误码率：出错信息位数和读出信息的总位数之比，磁表面存储器通常采用循环冗余码来发现并纠正错误 IO系统 CPU运算方法 逻辑移位：逻辑左移时，高位移丢，低位添0；逻辑右移时，低位移丢，高位添0 带进位的算术移位：避免算术左移时最高数位丢1 加减法运算：一般采用补码运算，结果是取模后的结果 一位符号位判断溢出：只要实际参加操作的两个数（减法时即为被减数和“求补”以后的减数）符号相同，结果又与原操作数的符号不同，即为溢出。 两位符号位判断溢出：采用变形补码(模数为4时的补码)运算，当2位符号位不同时，表示溢出，否则，无溢出，高位符号位代表真正的符号。 乘法运算：分解为移位运算和加法运算，初始部分积为0，递归地加被乘数当前位乘乘数再右移一位（算术移位） 原码一位乘：乘积符号由两原码符号位异或运箅结果决定，乘积的数值部分由两数绝对值相乘 原码两位乘：乘积符号由两原码符号位异或运箅结果决定，乘积的数值部分是两位两位地乘，加四倍通过存一个标志位让下一次运算实现，但是有可能大于2所以部分积需3位符号位且最高位为真正符号位，乘数前需添补两个0，偶n / 2次移位最多n / 2 + 1次加法，奇n / 2 + 1次移位最多n / 2 + 1次加法 补码一位乘：当乘数y为正数时，按原码乘法的规则运算；当乘数y为负数时，去掉符号位当成正数按原码乘法的规则运算，最后加上[-x]补，2位符号位 补码两位乘：3位符号位 除法 原码除法：商符由两数符号位进行异或运算求得 恢复余数法：比较x和y的大小，[|x|]补 + [-|y|]补，若余数为正商1，若余数为负商0且恢复余数(+[|y|]补)，第一次商是整数位可用于溢出判断 加减交替法(不恢复余数法)：当余数为正，商1左移减除数(+ [-|y|]补)；当余数为负，商0左移加除数(+ [|y|]补)，共上商n+1次（第一次商判断是否溢出，不判断则可少一次商），左移n次 双符号位运算：移位采用算术移位，最高位是真正的符号，次高位移位时可被占用 补码除法：符号位和数值部分一起参加运算，商1时左移一位(乘2)减除数(+ [-y]补)，商0时左移一位(乘2)加除数(+ [y]补)，若对商的精度无要求，采用“末位恒置1”，最大误差2的-n次方 浮点四则运算加减 小阶向大阶看齐，较小的数会丢失一些精度 特规定负二分之一不是规格化数(对补码而言)，补码规格化形式：大于0时，00.1xxx，小于0时，11.0xxx 00.0xxx、11.1xxx时左规，01.xx或10.xx时溢出右规（定点算溢出，浮点不算） 对阶和右规可能丢失低位，0舍1入法（移去的最高位为1时末尾加1），恒置1法（尾数末位恒置为1） 下溢一般机器不作溢出处理，仅把它作为机器零，上溢为浮点数真正溢出，机器需停止运算，作溢出中断处理 乘除 乘积的阶码应为相乘两数的阶码之和，乘积的尾数应为相乘两数的尾数之积 商的阶码为被除数的阶码减去除数的阶码，尾数为被除数的尾数除以除数的尾数所得的商 先按阶码做溢出判断，进行移码加减运算时，只需将移码表示的加数或减数的符号位取反（即变为补码），移码最高位加一个0，若计算后最高位为10上溢、11下溢，最高位为0无溢出 尾数乘法运算：一个数为0结果为0，否则采用定点小数运算，规格化后若阶码下溢则机器零，若阶码上溢则溢出处理，若限定字长或截断处理或0舍1入（原码舍会使绝对值变小，入会使绝对值变大，补码正数与原码相同，负数与原码相反（采用丢失全0、0不全0、1全0直接舍去，1不全0则最末尾加1）） 尾数除法运算：除数为0商为0，再检测被除数为0商为无穷大另作处理，防止溢出如果被除数的绝对值大于除数的绝对值，除数可先右移 ALU 并行加法器：每位全加器的进位输出是高一位全加器的进位输人，一级一级传递进位的过程将会大大影响运算速度 串行进位链：并行加法器中的进位信号采用串行传递，若与非门延迟t则每多一个全加器加2t时间 并行进位链（先行进位、跳跃进位）：并行加法器中的进位信号是同时产生的，理想n位进位同时产生，但实际实现有困难，单重分组（分若干小组，组内并行、组间串行）、双重分组（分若干大组再分若干小组，组内并行、组间并行） 指令系统人们习惯把每一条机器语言的语句称为机器指令，而又将全部机器指令的集合称为机器的指令系统。因此机器的指令系统集中反映了机器的功能。计算机能解题是由于机器本身存在一种语言，它既能理解人的意图，又能被机器自身识别 指令 固定长度操作码：便于硬件设计，指令译码时间短，广泛用于字长较长的、大中型计算机、超小型计算机以及RISC中 变化长度操作码：有效压缩操作码的平均长度，在字长较短的微型计算机中被广泛采用，通常采用拓展扩展操作码技术，使操作码的长度随地址数的减少而增加（上层指令的全1代码会用于下层指令） 操作数机器中常见的操作数类型有地址、数字、字符、逻辑数据等。 控制器 指令周期：CPU每取出并执行一条指令所需的全部时间称为指令周期，也即CPU完成一条指令的时间 取指周期：完成取指令和分析指令的操作 执行周期：完成执行指令的操作 间指周期：取有效地址 中断周期：进入中断响应阶段，将程序断点保存到存储器中 提高处理机速度：提高器件性能、改进系统结构（开发系统并行性）（将指令周期分段，分两段就是二级流水，结构相关、数据相关、控制相关（转移指令会使操作作废）） 吞吐率：在指令级流水线中，吞吐率是指单位时间内流水线所完成指令或输出结果的数量 最大吞吐率：流水线在连续流动达到稳定状态（流水线中各段都处于工作状态)后所获得的吞吐率。对于m段的指令流水线而言，若各段的时间均为t，则最大吞吐率为t分之1 实际吞吐率：流水线完成n条指令的实际吞吐率，m段流水n条指令共需m * t + (n - 1) t 时间，仅n远大于m时才有实际接近最大吞吐率 加速比：m段流水线的速度与等功能的非流水线的速度之比 效率：流水线中各功能段的利用率，各段工作时间和各段总的时间之比，mnt / m(m+n-1)t 中断系统 控制单元​ 不同的指令对应不同的微操作命令，且控制单元受时钟控制，每一个时钟脉冲使控制单元发送一个操作命令，或发送一组需要同时执行的操作命令，时钟、指令的操作码字段、”标志”（比如上条指令结果的正负）、系统总线（控制总线）的控制信号（中断、DMA等）是控制单元输入信号，CPU内的控制信号、系统总线（控制总线）的信号是输出信号 ​ 机器周期可看做是所有指令执行过程中的一个基准时间，由于CPU内部的操作速度较快，CPU访存的操作时间较长，因此通常以访问一次存储器的时间定为基准时间较为合理。在存储字长等于指令字长的前提下，取指周期可以看作机器周期 ​ 时钟周期即时钟信号的一个节拍（周l期），时钟信号的频率即CPU的主频，根据时钟周期完成微操作命令 静态微程序设计（事先编好）和动态微程序设计（可以改变） 串行微程序控制和并行微程序控制（流水微指令）","tags":[{"name":"Computer Hardware","slug":"Computer-Hardware","permalink":"http://xinitx.github.io/blog/tags/Computer-Hardware/"}],"categories":[]},{"title":"Computer Network","date":"2022-03-15T02:38:52.000Z","path":"Computer_Network/","text":"概述&emsp;计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，以功能完善的网络软件实现资源共享和信息传递的计算机系统。 拓展 互联网：凡是能彼此通信的设备组成的网络，包括因特网、军网等 因特网|world wide web：世界最大的互联网，包含万维网（URL、HTTP、HTML）、计算机网络（TCP/IP）、物联网等 组成主机|host（端系统|end system）、通信链路|communication link和分组交换机|packet switch、协议|protocol 安全 拓展 标准和协议：标准是官方规定的，能统一化 信道和链路：链路一般描述物理载体，信道是路径的逻辑抽象 FDM和TDM：频分多路需要复杂的硬件 应用层应用程序体系结构|application architecture 规定如何在端系统组织该应用程序：客户-服务器体系结构|Client/Server、对等体系结构|P2P SNMP HTTP 状态代码 1xx：指示信息–表示请求已接收，继续处理。 2xx：成功–表示请求已被成功接收、理解、接受。 3xx：重定向–要完成请求必须进行更进一步的操作。 4xx：客户端错误–请求有语法错误或请求无法实现。 5xx：服务器端错误–服务器未能实现合法的请求。 常见状态代码 200 OK：客户端请求成功。 400 Bad Request：客户端请求有语法错误，不能被服务器所理解。 401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。 403 Forbidden：服务器收到请求，但是拒绝提供服务。 404 Not Found：请求资源不存在，举个例子：输入了错误的URL。 500 Internal Server Error：服务器发生不可预期的错误。 503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1 200 OK（CRLF）。 提高HTTP连接性能的技术 并行连接：通过多条 TCP 连接发起并发的 HTTP 请求，RFC 2616规定should not 持久连接：重用 TCP 连接，以消除连接及关闭时延 管道化连接：通过共享的 TCP 连接发起并发的 HTTP 请求，多条请求放入队列 复用的连接：交替传送请求和响应报文，HTTP/2多路复用 SMTP + POP3 + IMAP DNS 资源记录 Resource Record,RR提供了主机名到IP地址的映射：(Name,Value,Type,TTL：记录的生存时间)，注册登记机构|registrar确保将一个类型NS和一个类型A的记录输人TLD DNS服务器，[RFC2136]和[RFC3007]定义了DNS动态更新 A：Name是主机名，Value是该主机名对应的IP地址，标准的主机名到P地址的映射 NS：Name是个域（如foo.com)，而Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名 CNAME：Name是别名，Value是主机对应的规范主机名 MX：Name是别名，Value是邮件服务器的规范主机名 BitTorrent DASHHTTP的动态适应性流DASH|Dynamic Adaptive Streaming over HTTP，允许客户使用不同的以太网接人速率流式播放具有不同编码速率的视频 每个视频版本存储在HTTP服务器中，都有一个不同的URL，HTTP服务器也有一个告示文件|manifest file 客户首先请求该告示文件并且得知各种各样的版本 客户通过在HTTP GET请求报文中对每块指定一个URL和一个字节范围，一次选择一块 在下载块的同时，客户也测量接收带宽并运行一个速率决定算法来选择下次请求的块 CDN内容分发网Content Distribution Network解决时延大、重复资源浪费带宽和ISP费用、单点故障的问题 SMS+MMS+iMessage+Whatsapp Socket1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# udpclientfrom socket import*serverName = &#x27;hostname&#x27; #IP地址serverPort = 12000 #端口号clientSocket = socket(AF_INET, SOCK_DGRAM) #AF_INET IPV4，SOCK_DGRAM UDPmessage= raw_input(&#x27;lnput lowercase sentence :&#x27;)clientSocket.sendto(message.encode(), (serverName, serverPort))modifiedMessage, serverAddress = clientSocket .recvfrom(2048) # 分组数据 源地址print(modifiedMessage.decode())clientSocket.close()# udpserverfrom socket import*serverPort = 12000 #端口号serverSocket = socket(AF_INET, SOCK_DGRAM) #AF_INET IPV4，SOCK_DGRAM UDPserverSocket.bind ((&#x27;&#x27;, serverPort))print(&quot;The server is ready to receive&quot;)while True: message, client.Address= serverSocket.recvfrom(2048) modified.Message= message.decode().upper() serverSocket.sendto(modifiedMessage.encode(), client.Address)# tcpclientfrom socket import*serverName = &#x27;servername&#x27; #IP地址serverPort = 12000 #端口号clientSocket = socket(AF_INET, SOCK_ STREAM) #AF_INET IPV4，SOCK_ STREAM TCPclientSocket.connect((serverName, serverPort)) #建立TCP连接sentence = raw_input(&#x27;Input lowercase sencence: &#x27;)clientSocket.send(sentence.encode()) #发送数据modifiedSentence = clientSocket.recv(1024)print(&#x27;From Server:&#x27;, modifiedSentence.decode())clientSocket.close()# tcpserverfrom socket impert＊serverPort = 12000serverSocket = socket(AF_INET, SOCK_STREAM) #欢迎套接字serverSocket.bind((&#x27;&#x27;, serverPort））serverSocket.listen(1) #最大连接数print(&#x27;The server is ready to receive&#x27;)while True: connectionSocket, addr = serverSocket.accept() #创建连接套接字 sentence = connectionSocket.recv(1024).decode() capitalizedSentence = sentence.upper() connectionSocket.send(capitalizedSentence.encode()) connectionSocket.close() 拓展 HTTP与SMTP的区别：HTTP主要是一个拉协议|pull protocol、SMTP基本上是一个推协议|push protocol，SMTP要求每个报文（包括它们的体）采用7比特ASCII码格式，HTTP把每个对象封装到它自己的HTTP响应报文中、SMTP则把所有报文对象放在一个报文之中 UDP和TCP编程的区别：TCP客户端程序并未显式地创建一个分组并为该分组附上目的地址，直接将字符串放入TCP连接 DNS的区别：不是一个直接和用户打交道的应用，为因特网上的用户应用程序以及其他软件提供一种核心功能，即将主机名转换为其背后的IP地址 应用层握手：HTTP没有，HTTPS、SMTP有 Telnet登录远程主机的标准协议 iMessage、Whatsapp使用流量套餐，SMS使用文本消息套餐 覆盖网络：P2P文件共享系统中的覆盖网络由参与的节点和节点之间的逻辑链路组成，若两个节点间存在TCP半永久连接即存在逻辑链路。 负载均衡：将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行 集中式和分布式的区别：单点故障|a single point of failure、通信容量|traffic volume、远距离的集中式数据库|distant centralized database、维护|maintenance，没有一台DNS服务器拥有因特网上所有主机的映射、这些映射分布在所有的DNS服务器上 运输层运输层协议为运行在不同主机上的应用进程之间提供了逻辑通信|logic communication功能，将到达主机的分组分拣给相应进程 如果网络层协议无法为主机之间发送的运输层报文段提供时延或带宽保证的话，运输层协议也就无法为进程之间发送的应用程序报文提供时延或带宽保证 即使底层网络协议不能在网络层提供相应的服务，运输层协议也能提供某些服务 高层是低层的拓展，将主机间交付扩展到进程间交付被称为运输层的多路复用|transport-layer multiplexing与多路分解|demultiplexing UDP 数据字段：要么包含一个查询报文，要么包含一个响应报文 长度字段：指示了在UDP报文段中的字节数（首部加数据） 检验和字段：检查UDP报文段中是否出现了差错，报文段中的所有16比特字的和进行反码运算，求和时遇到的任何溢出都被回卷(溢出的1加到最低位)，端到端原则|end-end principle(不能保证低层协议使用了差错检测) 套接字匹配：应用层按发送缓冲区大小写数据，udp发送，目的主机缓存满了就会丢弃，套接字不匹配：特殊的ICMP数据报 TCP可靠数据传输协议可靠数据传输协议|reliable data transfer protocol：数据可以通过一条可靠的信道进行传输。借助于可靠信道，传输数据比特就不会受到损坏(由0变为1，或者相反)或丢失，而且所有数据都是按照其发送顺序进行交付 TCP连接 序号：本报文段所发送的数据的第一个字节的序号 确认号：确认序号为上次接收的最后一个字节序号加1 数据偏移：首部长度 保留：保留为今后使用，目前应置为0 标志字段：ACK比特用于指示确认字段中的值是有效的，RST、SYN和FIN比特用于连接建立和拆除，NS拥塞控制随机和、防止TCP发送者的数据包标记被意外或恶意改动，ECN比特指示该路由器正在历经拥塞(接收方接收)，ECE比特显式拥塞通知(接收方发给发送方)，CWR拥塞窗口缩减、已缩减，PSH比特指示接收方应立即将数据交给上层，URG比特指示报文段里存在“紧急”数据、紧急数据的最后一个字节由16比特的紧急数据指针字段(urgent data pointer field)指出、当紧急数据存在并给出指向紧急数据尾指针的时候、TCP必须通知接收端的上层实体 接收窗口字段：接收方目前允许对方一次发送的数据量 选项：该字段用于发送方与接收方协商最大报文段长度(MSS)时，或在高速网络环境下用作窗口调节因子时使用。首部字段中还定义了一个时间戳选项。可参见RFC854和RFC1323了解其他细节 拥塞控制 拓展网络层 IPV4 版本：IP协议版本 首部长度：因为可包含一些可变数量的选项，说明首部长度 服务类型：区分不同类型数据报 数据报总长度：首部加数据的长度 标识、标志、片偏移：IP分片 寿命：TTL，每当一台路由器处理数据报时，该字段的值减1，值为0时丢弃 协议：指示了IP数据报的数据部分应交给哪个特定的运输层协议 首部检验和：帮助路由器检测收到的IP数据报中的比特错误，首部中的每2个字节当作一个数，用反码算术对这些数求和，每台路由器上必须重新计算检验和并再次放回原处，因为TTL字段会发生改变 选项：允许IP首部被扩展 数据（有效载荷）：包含要交付给目的地的运输层报文段，也可以是ICMP报文等 IPV6 扩大的地址容量引入了一种任播地址anycast address，可以使数据报交付给一组主机中的任意一个，40字节定长首部 版本：IP协议版本 服务类型：区分不同类型数据报 流标签：用于给属于特殊流的分组加上标签，这些特殊流是发送方要求进行特殊处理的流，如一种非默认服务质量或需要实时服务的流 下一个首部：标识数据报中的内容（数据字段）需要交付给哪个协议 跳限制：转发数据报的每台路由器将对该字段的内容减1，如果跳限制计数达到0，则该数据报将被丢弃 没有分片/重新组装：分组过大向发送方发回一个“分组太大”的ICMP差错报文 没有首部检验和：数据链路层、运输层会检验 选项没有消失：可能出现在IPv6首部中由“下一个首部”指出的位置上 隧道：通过IPV4通信链路时，封装到IPV4中，用协议字段指出，目的IPV6端取出 转发 路由选择 SDN ICMP Type - ICMP的类型,标识生成的错误报文； Code - 进一步划分ICMP的类型,该字段用来查找产生错误的原因.；例如，ICMP的目标不可达类型可以把这个位设为1至15等来表示不同的意思。 Checksum - Internet校验和（RFC 1071），用于进行错误检查，该校验和是从ICMP头和以该字段替换为0的数据计算得出的。 Rest of Header - 报头的其余部分，四字节字段，内容根据ICMP类型和代码而有所不同。 数据链路层 差错检测和纠正 多路访问链路 交换局域网 以太网 数据字段：承载IP数据报，以太网的最大传输单元(MTU)是1500字节，数据报必须被填充到46字节(网络层使用IP数据报首部中的长度字段去除填充) 目的地址：包含目的适配器的MAC地址 源地址：传输该帧到局域网上的适配器MAC地址 类型：类型字段允许以太网复用多种网络层协议 前同步码：以太网帧以一个8字节的前同步码(Preamble)字段开始，该前同步码的前7字节的值都是10101010，最后一个字节是10101011。前同步码字段的前7字节用于“唤醒”接收适配器，并且将它们的时钟和发送方的时钟同步。最后两个比特（第一个出现的两个连续的1）警告适配器“重要”的内容要来了 CRC校验：不通过直接丢弃 VLAN MPLS 数据中心网络 拓展 路由器和交换机的区别：路由器拓扑不会限制在生成树并可以使用最佳路径、有广播风暴的防火墙保护、不是即插即用的需配置IP地址、必须处理第三层处理时间长，交换机即插即用、只需处理第二层的帧、为限制广播帧的循环活跃拓扑限制成一颗生成树、不能避免广播风暴 MAC和IP：保持各层独立，局域网是为任意网络层协议而设计的，链路层使用IP就需手动配置 物理层 WIFIIEEE802.11无线LAN 有效载荷：通常是由一个IP数据报或者ARP分组组成，允许的最大长度为2312字节，但它通常小于1500字节 地址字段：地址2是传输该帧的站点的MAC地址，地址1是要接收该帧的无线站点的MAC地址，地址3包含外网路由器接口的MAC地址，自组织模式中互相转发时使用第四个地址 持续期：预约信道的持续时间 序号：区分新传输帧和以前帧的重传 帧控制字段：类型和子类型用于区分关联、RTS、CTS、ACK和数据帧，To和From字段用于定义不同地址字段的含义(自组织或基础设施模式)，WEP字段指示是否使用加密 蓝牙和ZigBee 蜂窝网络 移动管理 蜂窝网的移动性 无线和移动性：对高层协议的影响针对TCP的优化： 本地恢复。本地恢复方法的目标是在比特差错出现的当时和当地（如在无线链路中)将其恢复。 TCP发送方知晓无线链路。将在有线网络中发生的拥塞性丢包和在无线网络中发生的差错/丢包区分开 分离连接方法。移动用户和其他端点之间的端到端连接被打断为两个运输层连接，无线部分和有线部分级连形成","tags":[],"categories":[]}],"categories":[],"tags":[{"name":"Computer Hardware","slug":"Computer-Hardware","permalink":"http://xinitx.github.io/blog/tags/Computer-Hardware/"}]}