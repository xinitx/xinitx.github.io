{"pages":[{"title":"Tags","date":"2022-01-23T09:03:24.064Z","path":"tags/index.html","text":""},{"title":"About","date":"2022-04-17T09:37:15.980Z","path":"about/index.html","text":""},{"title":"Categories","date":"2022-01-23T09:03:24.057Z","path":"categories/index.html","text":""},{"title":"","date":"2022-04-17T09:36:30.201Z","path":"about/tips/main.js","text":"var pageData; $(document).ready(() => { var v = new Viewer('assets'); }); class Viewer { constructor (basePath) { fetch(\"tips/tips.json\") .then(response => response.json()) .then(result => { window.addEventListener(\"mouseover\", event => { for (let { selector, text } of result.mouseover) { if (!event.target.matches(selector)) continue; text = this.randomSelection(text); text = text.replace(\"{text}\", event.target.innerText); this.showMessage(text, 4000, 10); return; } }); window.addEventListener(\"click\", event => { for (let { selector, text } of result.click) { if (!event.target.matches(selector)) continue; text = this.randomSelection(text); text = text.replace(\"{text}\", event.target.innerText); this.showMessage(text, 4000, 8); return; } }); result.seasons.forEach(({ date, text }) => { const now = new Date(), after = date.split(\"-\")[0], before = date.split(\"-\")[1] || after; if ((after.split(\"/\")[0] { this.showMessage(\"你都复制了些什么呀，转载要记得加上出处哦！\", 6000, 9); }); window.addEventListener(\"visibilitychange\", () => { if (!document.hidden) this.showMessage(\"哇，你终于回来了～\", 6000, 9); }); this.welcomeMessage(); } welcomeMessage(){ let text; if (location.pathname === \"/blog/about/\") { // 如果是主页 const now = new Date().getHours(); if (now > 5 && now 7 && now 11 && now 13 && now 17 && now 19 && now 21 && now priority)) return; if (this.messageTimer) { clearTimeout(this.messageTimer); this.messageTimer = null; } sessionStorage.setItem(\"cute-text\", priority); const tips = document.getElementById(\"cute-tips\"); tips.innerHTML = text; tips.classList.add(\"cute-tips-active\"); this.messageTimer = setTimeout(() => { sessionStorage.removeItem(\"cute-text\"); tips.classList.remove(\"cutes-tips-active\"); }, timeout); } }"},{"title":"","date":"2022-04-17T09:36:46.842Z","path":"about/tips/tip.css","text":"#cute { display: inline; text-align:center; width: 50%; } #cute:hover { transform: translateY(0); } #cute-tips{ animation: shake 50s ease-in-out 5s infinite; background-color: rgba(0, 0, 0, 0.753); border: 1px solid rgba(224, 186, 140, .62); border-radius: 12px; box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2); font-size: 14px; line-height: 24px; width: 25%; min-height: 70px; opacity: 0; overflow: hidden; position: relative; margin: 0 auto; text-overflow: ellipsis; transition: opacity 1s; width: 250px; word-break: break-all; } #cute-tips.cute-tips-active { opacity: 1; transition: opacity .2s; } @keyframes shake { 2% { transform: translate(.5px, -1.5px) rotate(-.5deg); } 4% { transform: translate(.5px, 1.5px) rotate(1.5deg); } 6% { transform: translate(1.5px, 1.5px) rotate(1.5deg); } 8% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 10% { transform: translate(.5px, 2.5px) rotate(.5deg); } 12% { transform: translate(1.5px, 1.5px) rotate(.5deg); } 14% { transform: translate(.5px, .5px) rotate(.5deg); } 16% { transform: translate(-1.5px, -.5px) rotate(1.5deg); } 18% { transform: translate(.5px, .5px) rotate(1.5deg); } 20% { transform: translate(2.5px, 2.5px) rotate(1.5deg); } 22% { transform: translate(.5px, -1.5px) rotate(1.5deg); } 24% { transform: translate(-1.5px, 1.5px) rotate(-.5deg); } 26% { transform: translate(1.5px, .5px) rotate(1.5deg); } 28% { transform: translate(-.5px, -.5px) rotate(-.5deg); } 30% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 32% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 34% { transform: translate(2.5px, 2.5px) rotate(-.5deg); } 36% { transform: translate(.5px, -1.5px) rotate(.5deg); } 38% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 40% { transform: translate(-.5px, 2.5px) rotate(.5deg); } 42% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 44% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 46% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 48% { transform: translate(2.5px, -.5px) rotate(.5deg); } 50% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 52% { transform: translate(-.5px, 1.5px) rotate(.5deg); } 54% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 56% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 58% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 60% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 62% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 64% { transform: translate(-1.5px, 1.5px) rotate(1.5deg); } 66% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 68% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 70% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 72% { transform: translate(-.5px, -1.5px) rotate(1.5deg); } 74% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 76% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 78% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 80% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 82% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 84% { transform: translate(-.5px, .5px) rotate(1.5deg); } 86% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 88% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 90% { transform: translate(-1.5px, -.5px) rotate(-.5deg); } 92% { transform: translate(-1.5px, -1.5px) rotate(1.5deg); } 94% { transform: translate(.5px, .5px) rotate(-.5deg); } 96% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 98% { transform: translate(-1.5px, -1.5px) rotate(-.5deg); } 0%, 100% { transform: translate(0, 0) rotate(0); } }"},{"title":"","date":"2022-04-17T09:35:51.504Z","path":"about/tips/tips.json","text":"{\"mouseover\":[{\"selector\":\"#blog\",\"text\":[\"关于本博客？主要用于知识归纳和整理哦\"]},{\"selector\":\"#info\",\"text\":[\"关于主人的事？一直在努力成为大佬呢\"]},{\"selector\":\"#mail\",\"text\":[\"主人的邮箱地址哦：x17152141010@163.com\"]},{\"selector\":\".menu-item-home a\",\"text\":[\"点击前往首页，想回到上一页可以使用浏览器的后退功能哦。\",\"点它就可以回到首页啦！\",\"回首页看看吧。\"]},{\"selector\":\".menu-item-about a\",\"text\":[\"你想知道我家主人是谁吗？\",\"这里有一些关于我家主人的秘密哦，要不要看看呢？\",\"发现主人出没地点！\"]},{\"selector\":\".menu-item-tags a\",\"text\":[\"点击就可以看文章的标签啦！\",\"点击来查看所有标签哦。\"]},{\"selector\":\".menu-item-categories a\",\"text\":[\"文章都分类好啦～\",\"点击来查看文章分类哦。\"]},{\"selector\":\".menu-item-archives a\",\"text\":[\"翻页比较麻烦吗，那就来看看文章归档吧。\",\"文章目录都整理在这里啦！\"]},{\"selector\":\".menu-item-friends a\",\"text\":[\"这是我的朋友们哦ヾ(◍°∇°◍)ﾉﾞ\",\"要去大佬们的家看看吗？\",\"要去拜访一下我的朋友们吗？\"]},{\"selector\":\".menu-item-search a\",\"text\":[\"找不到想看的内容？搜索看看吧！\",\"在找什么东西呢，需要帮忙吗？\"]},{\"selector\":\".menu-item a\",\"text\":[\"快看看这里都有什么呢？\"]},{\"selector\":\".site-author\",\"text\":[\"我家主人好看吗？\",\"这是我家主人(*´∇｀*)\"]},{\"selector\":\".site-state\",\"text\":[\"这是文章的统计信息～\",\"要不要点进去看看？\"]},{\"selector\":\".feed-link a\",\"text\":[\"这里可以使用 RSS 订阅呢！\",\"利用 feed 订阅器，就能快速知道博客有没有更新了呢。\"]},{\"selector\":\".cc-opacity, .post-copyright-author\",\"text\":[\"要记得规范转载哦。\",\"所有文章均采用 CC BY-NC-SA 4.0 许可协议～\",\"转载前要先注意下文章的版权协议呢。\"]},{\"selector\":\".links-of-author\",\"text\":[\"这里是主人的常驻地址哦。\",\"这里有主人的联系方式！\"]},{\"selector\":\".followme\",\"text\":[\"手机扫一下就能继续看，很方便呢～\",\"扫一扫，打开新世界的大门！\"]},{\"selector\":\".fancybox img, img.medium-zoom-image\",\"text\":[\"点击图片可以放大呢！\"]},{\"selector\":\".copy-btn\",\"text\":[\"代码可以直接点击复制哟。\"]},{\"selector\":\".highlight .table-container, .gist\",\"text\":[\"GitHub！我是新手！\",\"PHP 是最好的语言！\"]},{\"selector\":\"a[href^='mailto']\",\"text\":[\"邮件我会及时回复的！\",\"点击就可以发送邮件啦～\"]},{\"selector\":\"a[href^='/tags/']\",\"text\":[\"要去看看 {text} 标签么？\",\"点它可以查看此标签下的所有文章哟！\"]},{\"selector\":\"a[href^='/categories/']\",\"text\":[\"要去看看 {text} 分类么？\",\"点它可以查看此分类下的所有文章哟！\"]},{\"selector\":\".post-title-link\",\"text\":[\"要看看 {text} 这篇文章吗？\"]},{\"selector\":\"a[rel='contents']\",\"text\":[\"点击来阅读全文哦。\"]},{\"selector\":\"a[itemprop='discussionUrl']\",\"text\":[\"要去看看评论吗？\"]},{\"selector\":\".beian a\",\"text\":[\"我也是有户口的人哦。\",\"我的主人可是遵纪守法的好主人。\"]},{\"selector\":\".container a[href^='http'], .nav-link .nav-text\",\"text\":[\"要去看看 {text} 么？\",\"去 {text} 逛逛吧。\",\"到 {text} 看看吧。\"]},{\"selector\":\".back-to-top\",\"text\":[\"点它就可以回到顶部啦！\",\"又回到最初的起点～\",\"要回到开始的地方么？\"]},{\"selector\":\".reward-container\",\"text\":[\"我是不是棒棒哒～快给我点赞吧！\",\"要打赏我嘛？好期待啊～\",\"主人最近在吃土呢，很辛苦的样子，给他一些钱钱吧～\"]},{\"selector\":\"#wechat\",\"text\":[\"这是我的微信二维码～\"]},{\"selector\":\"#alipay\",\"text\":[\"这是我的支付宝哦！\"]},{\"selector\":\"#bitcoin\",\"text\":[\"这是我的比特币账号！\"]},{\"selector\":\"#needsharebutton-postbottom .btn\",\"text\":[\"好东西要让更多人知道才行哦。\",\"觉得文章有帮助的话，可以分享给更多需要的朋友呢。\"]},{\"selector\":\".need-share-button_weibo\",\"text\":[\"微博？来分享一波喵！\"]},{\"selector\":\".need-share-button_wechat\",\"text\":[\"分享到微信吧！\"]},{\"selector\":\".need-share-button_douban\",\"text\":[\"分享到豆瓣好像也不错！\"]},{\"selector\":\".need-share-button_qqzone\",\"text\":[\"QQ 空间，一键转发，耶～\"]},{\"selector\":\".need-share-button_twitter\",\"text\":[\"Twitter？好像是不存在的东西？\"]},{\"selector\":\".need-share-button_facebook\",\"text\":[\"emmm…FB 好像也是不存在的东西？\"]},{\"selector\":\".post-nav-item a[rel='next']\",\"text\":[\"来看看下一篇文章吧。\",\"点它可以看下一篇文章哦！\",\"要翻到下一篇文章吗？\"]},{\"selector\":\".post-nav-item a[rel='prev']\",\"text\":[\"来看看上一篇文章吧。\",\"点它可以看上一篇文章哦！\",\"要翻到上一篇文章吗？\"]},{\"selector\":\".extend.next\",\"text\":[\"去下一页看看吧。\",\"点它可以前进哦！\",\"要翻到下一页吗？\"]},{\"selector\":\".extend.prev\",\"text\":[\"去上一页看看吧。\",\"点它可以后退哦！\",\"要翻到上一页吗？\"]},{\"selector\":\"input.vnick\",\"text\":[\"该怎么称呼你呢？\",\"留下你的尊姓大名！\"]},{\"selector\":\".vmail\",\"text\":[\"留下你的邮箱，不然就是无头像人士了！\",\"记得设置好 Gravatar 头像哦！\",\"为了方便通知你最新消息，一定要留下邮箱！\"]},{\"selector\":\".vlink\",\"text\":[\"快快告诉我你的家在哪里，好让我去参观参观！\"]},{\"selector\":\".veditor\",\"text\":[\"想要去评论些什么吗？\",\"要说点什么吗？\",\"觉得博客不错？快来留言和主人交流吧！\"]},{\"selector\":\".vcontrol a\",\"text\":[\"你会不会熟练使用 Markdown 呀？\",\"使用 Markdown 让评论更美观吧～\"]},{\"selector\":\".vemoji-btn\",\"text\":[\"要插入一个萌萌哒的表情吗？\",\"要来一发表情吗？\"]},{\"selector\":\".vpreview-btn\",\"text\":[\"要预览一下你的发言吗？\",\"快看看你的评论有多少负熵！\"]},{\"selector\":\".vsubmit\",\"text\":[\"评论没有审核，要对自己的发言负责哦～\",\"要提交了吗，请耐心等待回复哦～\"]},{\"selector\":\".vcontent\",\"text\":[\"哇，快看看这个精彩评论！\",\"如果有疑问，请尽快留言哦～\"]}],\"click\":[{\"selector\":\"#live2d\",\"text\":[\"是…是不小心碰到了吧…\",\"萝莉控是什么呀？\",\"你看到我的小熊了吗？\",\"再摸的话我可要报警了！⌇●﹏●⌇\",\"110 吗，这里有个变态一直在摸我(ó﹏ò｡)\",\"不要摸我了，我会告诉老婆来打你的！\",\"干嘛动我呀！小心我咬你！\",\"别摸我，有什么好摸的！\"]},{\"selector\":\".veditor\",\"text\":[\"要吐槽些什么呢？\",\"一定要认真填写喵～\",\"有什么想说的吗？\"]},{\"selector\":\".vsubmit\",\"text\":[\"输入验证码就可以提交评论啦～\"]}],\"seasons\":[{\"date\":\"01/01\",\"text\":\"元旦了呢，新的一年又开始了，今年是{year}年～\"},{\"date\":\"02/14\",\"text\":\"又是一年情人节，{year}年找到对象了嘛～\"},{\"date\":\"03/08\",\"text\":\"今天是国际妇女节！\"},{\"date\":\"03/12\",\"text\":\"今天是植树节，要保护环境呀！\"},{\"date\":\"04/01\",\"text\":\"悄悄告诉你一个秘密～今天是愚人节，不要被骗了哦～\"},{\"date\":\"05/01\",\"text\":\"今天是五一劳动节，计划好假期去哪里了吗～\"},{\"date\":\"06/01\",\"text\":\"儿童节了呢，快活的时光总是短暂，要是永远长不大该多好啊…\"},{\"date\":\"09/03\",\"text\":\"中国人民抗日战争胜利纪念日，铭记历史、缅怀先烈、珍爱和平、开创未来。\"},{\"date\":\"09/10\",\"text\":\"教师节，在学校要给老师问声好呀～\"},{\"date\":\"10/01\",\"text\":\"国庆节到了，为祖国母亲庆生！\"},{\"date\":\"11/05-11/12\",\"text\":\"今年的双十一是和谁一起过的呢～\"},{\"date\":\"12/20-12/31\",\"text\":\"这几天是圣诞节，主人肯定又去剁手买买买了～\"}]}"}],"posts":[{"title":"Web","date":"2021-12-16T00:59:19.000Z","path":"Web/Web/","text":"前言一切的开端源于博客网站的搭建&#x1F62D; &emsp;&emsp;当初我还是一个对web一无所知的萌新，偶然看到hexo史上最全搭建教程 &emsp;&emsp;I need it！ 主题地址 &emsp;&emsp;不错，不错，过程很顺利。可是别人家的博客为什么这么好?&#x1F62D; &emsp;&emsp;The World! &emsp;&emsp;差不多了，因为我的需求主要是自己知识结构的梳理（才不是因为我菜 &emsp;&emsp;最终效果，主题地址 网络&emsp;&emsp;计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，实现资源共享和信息传递的计算机系统。 模式 单播（Unicast） 广播（Broadcast） 组播（Multicast） 模型概念模型 &emsp;&emsp;开放式系统互联模型（Open System Interconnection Model），即OSI 常用模型 &emsp;&emsp;互联网协议套件（Internet Protocol Suite），即IPS 接口 为什么存在IP还需要MAC 先有的MAC，再有的IP，即它没有物理层到传输层的协议 IP会变，MAC保持不变 为什么需要端口 &emsp;&emsp;确定数据对应的服务 TCP端口：面向连接的、可靠的，需握手确定连接 UDP端口：无连接的、不可靠的，无需确定连接，发送数据就不管了 为什么需要三次握手 客户端连接请求，此请求可能是过时的 服务器端响应，客户端确认服务器端能响应 客户端响应，服务器端确认客户端能响应 为什么需要四次挥手 客户端断开请求，服务器端可能还有正在处理的数据请求 服务器端响应，客户端确认服务器端接收到请求 服务器端响应，客户端确认可以断开连接 客户端响应，确认收到可以断开连接 其他 网关（Gateway）：不同网络间的通道 代理（Proxy）：客户端-&gt;代理服务器-&gt;源服务器 套接字(Socket)：网络中不同主机上的应用进程之间进行双向通信的端点的抽象 以太网（Ethernet）：局域网技术，规定了包括物理层的连线、电子信号和介质访问控制的内容 互联网（Internet）：能彼此通信的设备组成的网络，使用TCP/IP协议 万维网（World Wide Web）：基于互联网的服务，网页组成的信息网，使用HTTP协议 前端浏览器&emsp;&emsp;用于检索并展示万维网信息资源的应用程序 URL DNS：将域名和IP地址相互映射 HyperText：用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本 DOM：文档对象模型，将文档用逻辑树的形式表示 语言HTML&emsp;&emsp;HyperText Markup Language，超文本标记语言，扩展超文本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100&lt;!doctype html&gt;说明文档类型&lt;html&gt;根元素，所有元素的父&lt;head&gt;描述文档本身的信息和相关资源&lt;title&gt;&lt;/title&gt;表示标题&lt;base&gt;&lt;/base&gt;为页面上的所有的相对链接规定默认URL或默认目标&lt;link&gt;&lt;/link&gt;定义文档与外部资源的关系&lt;meta&gt;&lt;/meta&gt;提供了 HTML 文档的元数据(数据的数据信息),如字符编码、作者、描述等&lt;object&gt;&lt;/object&gt; 用于包含对象，取代img等，如果未显示 object 元素，就会执行位于 &lt;object&gt; 和 &lt;/object&gt; 之间的代码。 &lt;script&gt;&lt;/script&gt;用于嵌入脚本, 或者引入外部脚本.&lt;style&gt;&lt;/style&gt;用于嵌入样式(页面内).&lt;/head&gt;&lt;body&gt;定义文档的主体&lt;!--注释--&gt;&lt;section&gt;定义文档区域&lt;h1&gt;...&lt;h6&gt;、&lt;p&gt;&lt;b&gt;粗体文本&lt;/b&gt;&lt;code&gt;计算机代码&lt;/code&gt;&lt;em&gt;强调文本&lt;/em&gt;&lt;i&gt;斜体文本&lt;/i&gt;&lt;kbd&gt;键盘输入&lt;/kbd&gt; &lt;pre&gt;预格式化文本&lt;/pre&gt;&lt;small&gt;更小的文本&lt;/small&gt;&lt;strong&gt;重要的文本&lt;/strong&gt; &lt;abbr&gt; （缩写）&lt;address&gt; （联系信息）&lt;bdo&gt; （文字方向）&lt;blockquote&gt; （从另一个源引用的部分）&lt;cite&gt; （工作的名称）&lt;del&gt; （删除的文本）&lt;ins&gt; （插入的文本）&lt;sub&gt; （下标文本）&lt;sup&gt; （上标文本）&lt;hr&gt; (分割线)&lt;br&gt; (换行)&lt;img&gt;&lt;map&gt;&lt;area&gt; 图片&lt;table&gt;&lt;th&gt;&lt;tr&gt;&lt;td&gt;&lt;caption&gt;&lt;colgroup&gt;&lt;col&gt;&lt;thead&gt;&lt;tbody&gt;&lt;tfoot&gt; 表格&lt;ul&gt;&lt;ol&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;&lt;dd&gt; 列表&lt;form&gt; 表单，包括文本域、下拉列表、单选框、复选框等等&lt;iframe&gt; 同一个浏览器窗口中显示不止一个页面&lt;script&gt; &lt;noscript&gt; 脚本&lt;div&gt; 块级元素，独占区域&lt;span&gt; 内联元素，依附区域&lt;canvas&gt; 绘图&lt;audio&gt; 定义音频内容&lt;video&gt; 定义视频（video 或者 movie）&lt;source&gt;定义多媒体资源 &lt;video&gt; 和 &lt;audio&gt;&lt;embed&gt; 定义嵌入的内容，比如插件。&lt;track&gt; 为诸如 &lt;video&gt; 和 &lt;audio&gt; 元素之类的媒介规定外部文本轨道&lt;datalist&gt; 定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。&lt;keygen&gt; 规定用于表单的密钥对生成器字段。&lt;output&gt; 定义不同类型的输出，比如脚本的输出。&lt;article&gt; 定义页面独立的内容区域。&lt;aside&gt; 定义页面的侧边栏内容。&lt;bdi&gt; 允许您设置一段文本，使其脱离其父元素的文本方向设置。&lt;command&gt; 定义命令按钮，比如单选按钮、复选框或按钮&lt;details&gt; 用于描述文档或文档某个部分的细节&lt;dialog&gt; 定义对话框，比如提示框&lt;summary&gt; 标签包含 details 元素的标题&lt;figure&gt; 规定独立的流内容（图像、图表、照片、代码等等）。&lt;figcaption&gt; 定义 &lt;figure&gt; 元素的标题&lt;footer&gt; 定义 section 或 document 的页脚。&lt;header&gt; 定义了文档的头部区域&lt;mark&gt; 定义带有记号的文本。&lt;meter&gt; 定义度量衡。仅用于已知最大和最小值的度量。&lt;nav&gt; 定义导航链接的部分。&lt;progress&gt; 定义任何类型的任务的进度。&lt;ruby&gt; 定义 ruby 注释（中文注音或字符）。&lt;rt&gt; 定义字符（中文注音或字符）的解释或发音。&lt;rp&gt; 在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。&lt;section&gt; 定义文档中的节（section、区段）。&lt;time&gt; 定义日期或时间。&lt;wbr&gt; 规定在文本中的何处适合添加换行符。 CSS&emsp;&emsp;Cascading Style Sheets，层叠样式表，控制样式和布局。常用Font Awesome、Bootstrap、stylus 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329//动画 css3@keyframes 定义一个动画,@keyframes定义的动画名称用来被animation-name所使用。animation 复合属性。检索或设置对象所应用的动画特效。 animation-name 检索或设置对象所应用的动画名称 ,必须与规则@keyframes配合使用，因为动画名称由@keyframes定义 animation-duration 检索或设置对象动画的持续时间 animation-timing-function 检索或设置对象动画的过渡类型 animation-delay 检索或设置对象动画的延迟时间 animation-iteration-count 检索或设置对象动画的循环次数 animation-direction 检索或设置对象动画在循环中是否反向运动 animation-play-state 检索或设置对象动画的状态 //背景(Background)background 复合属性。设置对象的背景特性。 1background-attachment 设置或检索背景图像是随对象内容滚动还是固定的。必须先指定background-image属性。 1background-color 设置或检索对象的背景颜色。 1background-image 设置或检索对象的背景图像。 1background-position 设置或检索对象的背景图像位置。必须先指定background-image属性。 1background-repeat 设置或检索对象的背景图像如何铺排填充。必须先指定background-image属性。 1background-clip 指定对象的背景图像向外裁剪的区域。 3background-origin S设置或检索对象的背景图像计算background-position时的参考原点(位置)。 3background-size 检索或设置对象的背景图像的尺寸大小。 3//边框(Border)和轮廓(Outline)border 复合属性。设置对象边框的特性。 1border-bottom 复合属性。设置对象底部边框的特性。 1border-bottom-color 设置或检索对象的底部边框颜色。 1 border-bottom-style 设置或检索对象的底部边框样式。 1border-bottom-width 设置或检索对象的底部边框宽度。 1border-color 置或检索对象的边框颜色。 1border-left 复合属性。设置对象左边边框的特性。 1border-left-color 设置或检索对象的左边边框颜色。 1border-left-style 设置或检索对象的左边边框样式。 1border-left-width 设置或检索对象的左边边框宽度。 1border-right 复合属性。设置对象右边边框的特性。 1border-right-color 设置或检索对象的右边边框颜色。 1border-right-style 设置或检索对象的右边边框样式。 1border-right-width 设置或检索对象的右边边框宽度。 1border-style 设置或检索对象的边框样式。 1border-top 复合属性。设置对象顶部边框的特性。 1border-top-color 设置或检索对象的顶部边框颜色 1border-top-style 设置或检索对象的顶部边框样式。 1border-top-width 设置或检索对象的顶部边框宽度。 1border-width 设置或检索对象的边框宽度。 1outline 复合属性。设置或检索对象外的线条轮廓。 2outline-color 设置或检索对象外的线条轮廓的颜色。 2outline-style 设置或检索对象外的线条轮廓的样式。 2outline-width 设置或检索对象外的线条轮廓的宽度。 2border-bottom-left-radius 设置或检索对象的左下角圆角边框。提供2个参数，2个参数以空格分隔，每个参数允许设置1个参数值，第1个参数表示水平半径，第2个参数表示垂直半径，如第2个参数省略，则默认等于第1个参数 3border-bottom-right-radius 设置或检索对象的右下角圆角边框。 3border-image 设置或检索对象的边框样式使用图像来填充。 3border-image-outset 规定边框图像超过边框的量。 3border-image-repeat 规定图像边框是否应该被重复（repeated）、拉伸（stretched）或铺满（rounded）。 3border-image-slice 规定图像边框的向内偏移。 3border-image-source 规定要使用的图像，代替 border-style 属性中设置的边框样式。 3border-image-width 规定图像边框的宽度。 3border-radius 设置或检索对象使用圆角边框。 3border-top-left-radius 定义左上角边框的形状。 3border-top-right-radius 定义右上角边框的形状。 3box-decoration-break 规定行内元素被折行 3box-shadow 向方框添加一个或多个阴影。 3//盒子(Box) css3overflow-x 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。 overflow-y 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。 overflow-style 规定溢出元素的首选滚动方法。 rotation 围绕由 rotation-point 属性定义的点对元素进行旋转。 rotation-point 定义距离上左边框边缘的偏移点。 //颜色 css3color-profile 允许使用源的颜色配置文件的默认以外的规范opacity 设置一个元素的透明度级别rendering-intent 允许超过默认颜色配置文件渲染意向的其他规范//内边距(Padding) css1padding 在一个声明中设置所有填充属性 padding-bottom 设置元素的底填充 padding-left 设置元素的左填充 padding-right 设置元素的右填充 padding-top 设置元素的顶部填充//媒体页面内容属性 css3bookmark-label 指定书签的标签 bookmark-level 指定了书签级别 bookmark-target 指定了书签链接的目标 float-offset 在相反的方向推动浮动元素，他们一直具有浮动 hyphenate-after 指定一个断字的单词断字字符后的最少字符数 hyphenate-before 指定一个断字的单词断字字符前的最少字符数 hyphenate-character 指定了当一个断字发生时，要显示的字符串 hyphenate-lines 表示连续断字的行在元素的最大数目 hyphenate-resource 外部资源指定一个逗号分隔的列表，可以帮助确定浏览器的断字点 hyphens 设置如何分割单词以改善该段的布局 image-resolution 指定了正确的图像分辨率 marks 将crop and/or cross标志添加到文档 string-set //尺寸height 设置元素的高度 1max-height 设置元素的最大高度 2max-width 设置元素的最大宽度 2min-height 设置元素的最小高度 2min-width 设置元素的最小宽度 2width 设置元素的宽度 1//弹性盒子(Flexible Box) css3//新flex 复合属性。设置或检索弹性盒模型对象的子元素如何分配空间。 flex-grow 设置或检索弹性盒的扩展比率。 flex-shrink 设置或检索弹性盒的收缩比率。 flex-basis 设置或检索弹性盒伸缩基准值。 flex-flow 复合属性。设置或检索弹性盒模型对象的子元素排列方式。 flex-direction 该属性通过定义flex容器的主轴方向来决定felx子项在flex容器中的位置。 flex-wrap 该属性控制flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。 align-content 在弹性容器内的各项没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）。 align-items 定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。 align-self 定义flex子项单独在侧轴（纵轴）方向上的对齐方式。 justify-content 设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。 order 设置或检索弹性盒模型对象的子元素出现的順序。 //旧box-align 指定如何对齐一个框的子元素 box-direction 指定在哪个方向，显示一个框的子元素 box-flex 指定一个框的子元素是否是灵活的或固定的大小 box-flex-group 指派灵活的元素到Flex组 box-lines 每当它在父框的空间运行时，是否指定将再上一个新的行列 box-ordinal-group 指定一个框的子元素的显示顺序 box-orient 指定一个框的子元素是否在水平或垂直方向应铺设 box-pack 指定横向盒在垂直框的水平位置和垂直位置 //字体(Font)font 在一个声明中设置所有字体属性 1font-family 规定文本的字体系列 1font-size 规定文本的字体尺寸 1font-style 规定文本的字体样式 1font-variant 规定文本的字体样式 1font-weight 规定字体的粗细 1@font-face 一个规则，允许网站下载并使用其他超过&quot;Web- safe&quot;字体的字体 3font-size-adjust 为元素规定 aspect 值 3font-stretch 收缩或拉伸当前的字体系列 3//内容生成属性(Generated Content Properties)content 与 :before 以及 :after 伪元素配合使用，来插入生成内容 2counter-increment 递增或递减一个或多个计数器 2counter-reset 创建或重置一个或多个计数器 2quotes 设置嵌套引用的引号类型 2crop 允许replaced元素只是作为一个对象代替整个对象的矩形区域 3move-to 从流中删除元素，然后在文档中后面的点上重新插入。 3page-policy 判定基于页面的给定元素的适用于计数器的字符串值 3//网格(Grid) css3grid-columns 指定在网格中每列的宽度 grid-rows 指定在网格中每列的高度 //超链接(Hyperlink) css3target 简写属性设置target-name, target-new,和target-position属性 target-name 指定在何处打开链接（目标位置） target-new 指定是否有新的目标链接打开一个新窗口或在现有窗口打开新标签 target-position 指定应该放置新的目标链接的位置 //线框(Linebox)alignment-adjust 允许更精确的元素的对齐方式 alignment-baseline 其父级指定的内联级别的元素如何对齐 baseline-shift 允许重新定位相对于dominant-baseline的dominant-baseline dominant-baseline 指定scaled-baseline-table drop-initial-after-adjust 设置下拉的主要连接点的初始对齐点 drop-initial-after-align 校准行内的初始行的设置就是具有首字母的框使用初级连接点 drop-initial-before-adjust 设置下拉的辅助连接点的初始对齐点 drop-initial-before-align 校准行内的初始行的设置就是具有首字母的框使用辅助连接点 drop-initial-size 控制局部的首字母下沉 drop-initial-value 激活一个下拉式的初步效果 inline-box-align 设置一个多行的内联块内的行具有前一个和后一个内联元素的对齐 line-stacking 一个速记属性设置line-stacking-strategy, line-stacking-ruby,和line-stacking-shift属性 line-stacking-ruby 设置包含Ruby注释元素的行对于块元素的堆叠方法 line-stacking-shift 设置base-shift行中块元素包含元素的堆叠方法 line-stacking-strategy 设置内部包含块元素的堆叠线框的堆叠方法 text-height 行内框的文本内容区域设置block-progression维数 //列表(List) css1list-style 在一个声明中设置所有的列表属性 list-style-image 将图象设置为列表项标记 list-style-position 设置列表项标记的放置位置 list-style-type 设置列表项标记的类型 //外边距(Margin) css1margin 在一个声明中设置所有外边距属性 margin-bottom 设置元素的下外边距 margin-left 设置元素的左外边距 margin-right 设置元素的右外边距 margin-top 设置元素的上外边距 //字幕(Marquee) css3marquee-direction 设置内容移动的方向 marquee-play-count 设置内容移动多少次 marquee-speed 设置内容滚动的速度有多快 marquee-style 设置内容移动的样式 //多列(Multi-column) css3column-count 指定元素应该分为的列数 column-fill 指定如何填充列 column-gap 指定列之间的差距 column-rule 对于设置所有column-rule-*属性的简写属性 column-rule-color 指定列之间的颜色规则 column-rule-style 指定列之间的样式规则 column-rule-width 指定列之间的宽度规则 column-span 指定元素应该跨越多少列 column-width 指定列的宽度 columns 缩写属性设置列宽和列数 //页面媒体(Paged Media) css3fit 如果其宽度和高度属性都不是auto给出一个提示，如何大规模替换元素 fit-position 判定方框内对象的对齐方式 image-orientation 指定用户代理适用于图像中的向右或顺时针方向的旋转 page 指定一个元素应显示的页面的特定类型 size 指定含有BOX的页面内容的大小和方位 //定位(Positioning)bottom 设置定位元素下外边距边界与其包含块下边界之间的偏移 2clear 规定元素的哪一侧不允许其他浮动元素 1clip 剪裁绝对定位元素 2cursor 规定要显示的光标的类型（形状） 2display 规定元素应该生成的框的类型 1float 规定框是否应该浮动 1left 设置定位元素左外边距边界与其包含块左边界之间的偏移 2overflow 规定当内容溢出元素框时发生的事情 2position 规定元素的定位类型 2right 设置定位元素右外边距边界与其包含块右边界之间的偏移 2top 设置定位元素的上外边距边界与其包含块上边界之间的偏移 2visibility 规定元素是否可见 2z-index 设置元素的堆叠顺序 2//分页(Print) css2orphans 设置当元素内部发生分页时必须在页面底部保留的最少行数 page-break-after 设置元素后的分页行为 page-break-before 设置元素前的分页行为 page-break-inside 设置元素内部的分页行为 widows 设置当元素内部发生分页时必须在页面顶部保留的最少行数 //Ruby css3ruby-align 控制Ruby文本和Ruby基础内容相对彼此的文本对齐方式 ruby-overhang 当Ruby文本超过Ruby的基础宽，确定ruby文本是否允许局部悬置任意相邻的文本，除了自己的基础 ruby-position 它的base控制Ruby文本的位置 ruby-span 控制annotation 元素的跨越行为 //语音(Speech) css3mark 缩写属性设置mark-before和mark-after属性 mark-after 允许命名的标记连接到音频流 mark-before 允许命名的标记连接到音频流 phonemes 指定包含文本的相应元素中的一个音标发音 rest 一个缩写属性设置rest-before和rest-after属性 rest-after 一个元素的内容讲完之后，指定要休息一下或遵守韵律边界 rest-before 一个元素的内容讲完之前，指定要休息一下或遵守韵律边界 voice-balance 指定了左，右声道之间的平衡 voice-duration 指定应采取呈现所选元素的内容的长度 voice-pitch 指定平均说话的声音的音调（频率） voice-pitch-range 指定平均间距的变化 voice-rate 控制语速 voice-stress 指示着重力度 voice-volume 语音合成是指波形输出幅度 //表格(Table) css2border-collapse 规定是否合并表格边框 border-spacing 规定相邻单元格边框之间的距离 caption-side 规定表格标题的位置 empty-cells 规定是否显示表格中的空单元格上的边框和背景 table-layout 设置用于表格的布局算法 //文本(Text)color 设置文本的颜色 1direction 规定文本的方向 / 书写方向 2letter-spacing 设置字符间距 1line-height 设置行高 1text-align 规定文本的水平对齐方式 1text-decoration 规定添加到文本的装饰效果 1text-indent 规定文本块首行的缩进 1text-transform 控制文本的大小写 1unicode-bidi 2vertical-align 设置元素的垂直对齐方式 1white-space 设置怎样给一元素控件留白 1word-spacing 设置单词间距 1text-emphasis 向元素的文本应用重点标记以及重点标记的前景色。 1hanging-punctuation 指定一个标点符号是否可能超出行框 3punctuation-trim 指定一个标点符号是否要去掉 3text-align-last 当 text-align 设置为 justify 时，最后一行的对齐方式。 3text-justify 当 text-align 设置为 justify 时指定分散对齐的方式。 3text-outline 设置文字的轮廓。 3text-overflow 指定当文本溢出包含的元素，应该发生什么 3text-shadow 为文本添加阴影 3text-wrap 指定文本换行规则 3word-break 指定非CJK文字的断行规则 3word-wrap 设置浏览器是否对过长的单词进行换行。 3//2D/3D 转换属性 css3transform 适用于2D或3D转换的元素 transform-origin 允许您更改转化元素位置 transform-style 3D空间中的指定如何嵌套元素 perspective 指定3D元素是如何查看透视图 perspective-origin 指定3D元素底部位置 backface-visibility 定义一个元素是否应该是可见的，不对着屏幕时 //过渡(Transition) css3transition 此属性是 transition-property、transition-duration、transition-timing-function、transition-delay 的简写形式。 transition-property 设置用来进行过渡的 CSS 属性。 transition-duration 设置过渡进行的时间长度。 transition-timing-function 设置过渡进行的时序函数。 transition-delay 指定过渡开始的时间。 //用户外观(User-interface) css3appearance 定义元素的外观样式 box-sizing 允许您为了适应区域以某种方式定义某些元素 icon 为元素指定图标 nav-down 指定用户按向下键时向下导航的位置 nav-index 指定导航（tab）顺序。 nav-left 指定用户按向左键时向左导航的位置 nav-right 指定用户按向右键时向右导航的位置 nav-up 指定用户按向上键时向上导航的位置a outline-offset 设置轮廓框架在 border 边缘外的偏移 resize 定义元素是否可以改变大小 Javascript弱类型动态语言，Web自然选择的结果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697//Javascript是弱类型(自动的类型转换)动态(解释性)语言//基本数据类型string，number，bigint(可以表示任意大的整数)，boolean，null，undefined，symbol 1. 所有基本类型的值都是不可改变的2. 除了 null 和 undefined之外，所有基本类型都有其对应的包装对象//语句var 声明函数作用域的变量(for外可用)let 声明块级作用域的变量(for外不可用)const 声明块级作用域的变量(不可改变)export 导出实时绑定的函数、对象或原始值import 导入模块Array 类似于列表的高阶对象Function 函数对象if else 条件语句switch case default 条件语句for 循环语句do while 循环语句break goto continue 跳转语句this 指向当前对象super 指向原型对象//JQuery通过选取 HTML 元素，并对选取的元素执行某些操作$(selector).action()//常用事件click 鼠标点击dblclick 双击mouseenter 鼠标穿过mouseleave 鼠标离开mousedown 鼠标按下mouseup 鼠标松开hover 鼠标悬停focus 获得焦点blur 失去焦点keypress 按下松开按键keydown 按下按键keyup 松开按键submit 提交表单(只适用于form) change 内容改变load 元素加载，1.8 中已废弃，还存在一个同名的 jQuery AJAX 方法resize 窗口大小scroll 滚动unload 用户离开页面，1.8 中被废弃，在 3.0 版本被移除ready 文档完全加载完后执行函数//常用效果hide() show()toggle()fadeIn()fadeOut()fadeToggle()fadeTo()slideDown()slideUp()slideToggle()animate() stop() //方法text() - 设置或返回所选元素的文本内容html() - 设置或返回所选元素的内容（包括 HTML 标记）val() - 设置或返回表单字段的值append() - 在被选元素的结尾插入内容prepend() - 在被选元素的开头插入内容after() - 在被选元素之后插入内容before() - 在被选元素之前插入内容remove() - 删除被选元素（及其子元素）empty() - 从被选元素中删除子元素addClass() - 向被选元素添加一个或多个类removeClass() - 从被选元素删除一个或多个类toggleClass() - 对被选元素进行添加/删除类的切换操作css() - 设置或返回样式属性width()height()innerWidth()innerHeight()outerWidth()outerHeight()$(selector).load(URL,data,callback);GET - 从指定的资源请求数据POST - 向指定的资源提交要处理的数据两种不同的框架正在使用相同的简写符号，有可能导致脚本停止运行，noConflict() 方法会释放对 $ 标识符的控制 Others XML：eXtensible Markup Language，可扩展标记语言，使用标记结构传输和存储数据 YAML：YAML Ain’t a Markup Language，表达资料序列化格式的语言 JSON：JavaScript Object Notation，基于JS的数据格式 相关概念 矢量图：根据几何特性绘制的图形，图像不会失真 jQuery：JS库 Nunjucks：JS模板引擎 EJS：JS模板引擎 V8引擎：执行JS的运行时环境，性能强 node.js：服务端JS环境，基于V8 AngularJS：前端框架 Vue：前端框架 Pjax：局部刷新技术 框架django基于Python的 Web 框架 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313//安装，前提：python、virtualenvwrapper-win虚拟环境/*pip install virtualenvwrapper-win —安装虚拟环境deactivate —退出当前的Python虚拟环境workon — 列出可用的所有虚拟环境workon name_of_environment —激活特定的Python虚拟环境rmvirtualenv name_of_environment — 移除特定的虚拟环境*/$ mkvirtualenv my_django_environment //创建虚拟环境$ workon my_django_environment //进入虚拟环境$ pip install django //安装Django//新建站点/*py -m django --version //查看django版本django-admin startproject mytestsite //创建站点python manage.py runserver [端口号] //运行站点*///文件结构mytestsite/ manage.py //创建应用，和数据库通讯，启动开发用网络服务器 mytestsite/ settings.py //所有的网站设置 urls.py //定义了网站url到view的映射 wsgi.py //帮助Django应用和网络服务器间的通讯//应用/*python manage.py startapp app_name //创建应用*/mytestsite/ manage.py mytestsite/ app_name/ views.py //视图 models.py //模型 tests.py //测试 admin.py //网站管理设置 apps.py //注册应用 __init__.py //这个文件作为Python包在项目的其他部分使用 migrations/ //存储“migrations”//视图，负责返回请求对象或404/*urls.py/ //链接URL映射器调用视图需要将视图映射到URL创建URLconf，urls.py*///views.pyfrom django.http import HttpResponsedef index(request): return HttpResponse(&quot;Hello World&quot;)//urls.py，命名空间from django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.index, name = &#x27;index&#x27;)]//mysite/urls.pyfrom django.urls import include, pathurlpatterns = [ path(&#x27;app_name/&#x27;, include(&#x27;app_name.urls&#x27;)), //include函数，绝对路径改为相对路径？]//数据库/*$ python manage.py migrate根据settings.py/INSTALLED_APPS/设置和创建必要的数据库表settings.py/DATABASES/ //配置数据库ENGINE：&#x27;django.db.backends.sqlite3&#x27;, &#x27;django.db.backends.postgresql&#x27;, &#x27;django.db.backends.mysql&#x27;, or &#x27;django.db.backends.oracle&#x27; //数据库引擎NAME（SQLite用绝对路径，其他数据库需添加USER, PASSWORD, HOST等） //数据库名*///语法from django.db import modelsclass 表名1(models.Model): 项1 = models.CharField(max_length=200) //数据类型 项2 = models.DateTimeField(&#x27;date published&#x27;) //数据类型 def __str__(self): //方便处理交互 return self.项1class 表名2(models.Model): 项1 = models.ForeignKey(表名1, on_delete=models.CASCADE) //级联，外键 项2 = models.CharField(max_length=200) 项3 = models.IntegerField(default=0) def __str__(self): return self.项2//注册/*settings.py/INSTALLED_APPS/添加app_name.apps.app_nameConfig //注册应用settings.py/TIME_ZONE //时区设置$ python manage.py makemigrations app_name //提交更改保存为迁移迁移是Django为模型保存改变的方式，在migrations文件夹下可以查看编辑$ python manage.py sqlmigrate app_name 编号 查看数据库信息$ python manage.py migrate //应用迁移*///API/*$ python manage.py shell*/from app_name.models import 表1, 表2 // 导入类表1.objects.all() //查看记录from django.utils import timezone //时间变量名 = 表1(项1 = &quot;&quot;, 项2 = timezone.now()) //一个类变量名.save()变量名.id //创建ID变量名.项1 //访问元素/*表1.objects.filter(id=1) //获得对象表1.objects.filter(项1__startswith=&#x27;What&#x27;)表1.objects.get(项2__year=current_year)表1.objects.get(id=1).count() //计数.delete() //删除对象exit() //退出shell*/变量名2 = 表1.objects.get(pk = 1) //获得对象变量名2.表2_set.all() //查看对象的关联对象集变量名2.表2_set.create(项2 = ，项3 = ) //表2名需要小写//管理用户，cmd下命令/*$ python manage.py createsuperuserUsername: adminEmail address: admin@example.comPassword: **********Password (again): *********Superuser created successfully.*///在管理页面添加appapp_name/admin.py 添加from .models import 表名1admin.site.register(表名1)//模板/*setting/TEMPLATES描述Django将如何加载和呈现模板app_name/创建文件夹templates，在里面再建app_name文件夹，在里面建index.html*/def index(request): username_list = Username.objects.all() context = &#123; //模板中使用的变量 &#x27;username_list&#x27;: username_list, &#125; template = loader.get_template(&#x27;app_name/index.html&#x27;) //视图中获取模板 return HttpResponse(template.render(context, request)) 或 return render(request, &#x27;app_name/index.html&#x27;, context)//404页面def detail(request, id): try: username = Username.objects.get(pk=id) except Username.DoesNotExist: raise Http404(&quot;Username does not exist&quot;) return render(request, &#x27;app_name/detail.html&#x27;, &#123;&#x27;username&#x27;: username&#125;) 或 username = get_object_or_404(Username, pk=id)//index.html&#123;% for username in username_list %&#125; //命令&#123;&#123; username &#125;&#125; //取值&#123;% endfor %&#125;//测试，测试系统将自动在名称以test开头的任何文件中查找/*Django 的单元测试采用 Python 的标准模块： unittestapp_name/新建tests.py1. 对于每一个测试方法都会将setUp()和tearDown()方法执行一遍2. 会单独新建一个测试数据库来进行数据库的操作方面的测试，默认在测试完成后销毁3. 在测试方法中对数据库进行增删操作，最后都会被清除4. django单元测试时为了模拟生产环境，会修改settings中的变量*/from django.test import Clientclass Client(enforce_csrf_checks=False, **defaults)[source] //测试客户端Client().get() //请求页面Client().post() //提交表单//缓存/*settings.py添加*/CACHES = &#123; &#x27;default&#x27;: &#123; &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.db.DatabaseCache&#x27;, //数据库缓存 &#x27;LOCATION&#x27;: &#x27;my_cache_table&#x27;, &#125;&#125;//代码//modelsfrom django.db import models# Create your models here.class Username(models.Model): Username_text = models.CharField(max_length=200) def __str__(self): return self.Username_textclass Password(models.Model): username = models.ForeignKey(Username, on_delete=models.CASCADE) password_text = models.CharField(max_length=200) def __str__(self): return self.password_text//views# Create your views here.from django.shortcuts import render, redirectfrom django.http import HttpResponse# Create your views here.from .models import Usernamefrom django.template import loaderfrom . import modelsdef login(request): if request.method == &quot;GET&quot;: return render(request, &quot;login/login.html&quot;) username = request.POST.get(&quot;username&quot;) password = request.POST.get(&quot;pwd&quot;) user_obj = models.Username.objects.filter(Username_text=username).first() if not user_obj: return redirect(&quot;/login/&quot;) user_obj2 = user_obj.password_set.filter(password_text=password).first() print(user_obj.Username_text) if not user_obj2: return redirect(&quot;/login/&quot;) else: rep = redirect(&quot;/index/&quot;) rep.set_cookie(&quot;is_login&quot;, True) return rep def index(request): print(request.COOKIES.get(&#x27;is_login&#x27;)) status = request.COOKIES.get(&#x27;is_login&#x27;) # 收到浏览器的再次请求,判断浏览器携带的cookie是不是登录成功的时候响应的 cookie if not status: return redirect(&#x27;/login/&#x27;) return render(request, &quot;login/index.html&quot;)def logout(request): rep = redirect(&#x27;/login/&#x27;) rep.delete_cookie(&quot;is_login&quot;) return rep # 点击注销后执行,删除cookie,不再保存用户状态，并弹到登录页面 def order(request): print(request.COOKIES.get(&#x27;is_login&#x27;)) status = request.COOKIES.get(&#x27;is_login&#x27;) if not status: return redirect(&#x27;/login/&#x27;) return render(request, &quot;login/order.html&quot;)//urlsfrom django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;index/&#x27;, views.index, name=&#x27;index&#x27;), path(&#x27;login/&#x27;, views.login, name=&#x27;login&#x27;), path(&#x27;logout/&#x27;, views.logout, name=&#x27;logout&#x27;), path(&#x27;order/&#x27;, views.order, name=&#x27;order&#x27;),]//testsfrom django.test import TestCasefrom django.test import Clientfrom .models import Password, Username# Create your tests here.class MyTestClass(TestCase): @classmethod def setUp(self): a = Username.objects.create(Username_text = &#x27;123456&#x27;) a.password_set.create(password_text = &#x27;123456&#x27;) print(&quot;======in setUp&quot;) def test_login(self): c = Client() b = c.get(&#x27;/login/&#x27;) self.assertEqual(b.status_code, 200) def test_index(self): c = Client() c.post(&#x27;/login/&#x27;, &#123;&#x27;username&#x27;: &#x27;123456&#x27;, &#x27;pwd&#x27;: &#x27;123456&#x27;&#125;) d = c.get(&#x27;/index/&#x27;) self.assertEqual(d.status_code, 200) def test_order(self): c = Client() c.post(&#x27;/login/&#x27;, &#123;&#x27;username&#x27;: &#x27;123456&#x27;, &#x27;pwd&#x27;: &#x27;123456&#x27;&#125;) d = c.get(&#x27;/order/&#x27;) self.assertEqual(d.status_code, 200) def tearDown(self): print(&quot;======in tearDown&quot;) spring基于Java的 Web 框架 实践NetDisk Blog 安装Git 安装Node.js（注意Node.js的版本不能太高）1234567**windows**[官网](https://nodejs.org/en/download/)直接下载安装 || 安装gnvm后，cmd管理员权限下命令行安装**linux：**1. sudo apt-get install nodejs2. sudo apt-get install npm npm install -g hexo-cli, hexo init 博客文件夹名123451. hexo clean，清除缓存1. hexo generate（hexo g），生成静态网页2. hexo deploy（hexo d），进行部署3. hexo server（hexo s），运行4. hexo -v，查看版本 Github新建仓库，没有域名需用户名.github.io为仓库名 修改博客配置文件_config.yml1234deploy: type: git repo: https://github.com/用户名/用户名.github.io.git branch: master 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//主题https://hexo.io/themes///添加域名1. 购买域名2. 解析域名3. 添加CNAME记录，指向博客github地址4. 登录GitHub，在仓库setting设置custom domain输入域名5. 在博客文件夹source中创建一个CNAME的文件写入域名//hexo命令hexo new page/draft ...hexo new ...hexo publish ...//Markdown语法分段: 两个回车换行: 两个空格 + 回车标题: # ~ ######，#号的个数表示几级标题，即表示一级标题到六级标题强调: **文字** ， __文字__ ， _文字_ ， *文字* ， 文字引用: &gt; 注意后面紧跟个空格表格: - 和 | 分割行和列 ， : 控制对其方式代码块: 四个空格 开头或， 使用``` 代码内容 ```链接: [文字](链接地址)图片: ![图片说明](图片地址) ，地址可以是本地路劲，也可以是网络地址列表: * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格//常用图片：&lt;img src = &quot;地址&quot;&gt; &lt;/img&gt;空格：&amp;nbsp;&amp;emsp;&amp;ensp;换行：&lt;/br&gt;颜色：&lt;font color = &quot;颜色值&quot;&gt;&lt;/font&gt;表格：&lt;table border=&quot;1&quot;&gt;&lt;tr&gt; &lt;th&gt; &lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;列表：&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;有序、&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;无序&lt;b&gt;粗体&lt;/b&gt; &lt;big&gt;大号字&lt;/big&gt;&lt;em&gt;着重文字&lt;/em&gt;&lt;i&gt;斜体字&lt;/i&gt;&lt;small&gt;小号字&lt;/small&gt;&lt;strong&gt;加重语气&lt;/strong&gt;&lt;sub&gt;下标&lt;/sub&gt;&lt;sup&gt;上标&lt;/sup&gt;&lt;ins&gt;插入字&lt;/ins&gt;&lt;del&gt;删除字&lt;/del&gt;&lt;u&gt;下划线&lt;/u&gt;&lt;code&gt;计算机代码&lt;/code&gt;&lt;kbd&gt;键盘文本&lt;/kbd&gt;&lt;samp&gt;计算机代码样本&lt;/samp&gt;&lt;tt&gt;打字机代码&lt;/tt&gt;&lt;var&gt;变量&lt;/var&gt;&lt;pre&gt;预格式文本&lt;/pre&gt;&lt;abbr&gt;缩写&lt;/abbr&gt;&lt;address&gt;地址&lt;/address&gt;&lt;acronym&gt;首字母缩写&lt;/acronym&gt;&lt;bdo&gt;文字方向&lt;/bdo&gt;&lt;blockquote cite=&#x27;www.baidu.com&#x27;&gt;长引用&lt;/blockquote&gt;&lt;q&gt;短引用&lt;/q&gt;&lt;cite&gt;引用&lt;/cite&gt;&lt;dfn&gt;定义项目&lt;/dfn&gt; 测试1、apache压力测试2、selenium自动化测试 1234567891011121314151617181920//利用apache的ab工具进行压力测试1. 下载地址https://www.apachehaus.com/cgi-bin/download.plx2. 添加bin目录到环境变量2. 打开bin目录，此处打开命令行窗口运行命令//利用selenium自动化测试1. pip install selenium2. 安装对应浏览器的WebDriver驱动，ChromeDriver的官方网站：https://sites.google.com/a/chromium.org/chromedriver/downloads3. 将驱动添加到环境变量4. 写代码from selenium import webdriverbrowser = webdriver.Chrome()browser.get(&#x27;http://localhost:8080/&#x27;)login = browser.find_element_by_id(&quot;login02&quot;) //通过ID获取元素lists = browser.find_elements_by_class_name(&quot;txtd&quot;) //通过Classname获取元素passw.send_keys(&quot;123456&quot;) //设置值ActionChains(browser).click(loginin).perform() //模拟操作","tags":[{"name":"Web","slug":"Web","permalink":"http://xinitx.github.io/blog/tags/Web/"}],"categories":[{"name":"Web","slug":"Web","permalink":"http://xinitx.github.io/blog/categories/Web/"}]}],"categories":[{"name":"Web","slug":"Web","permalink":"http://xinitx.github.io/blog/categories/Web/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://xinitx.github.io/blog/tags/Web/"}]}